package com.nodemenu {		import flash.display.Sprite;	import flash.display.Graphics;	import flash.display.Loader;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import flash.text.TextFieldAutoSize;	import flash.text.GridFitType;	import flash.text.Font;	import flash.net.URLRequest;	import flash.net.navigateToURL;		public class Node extends Sprite {				/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		DEFAULTS		::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/		public static const DEFAULT_BORDER_ALPHA:Number =			1.0;		public static const DEFAULT_BORDER_THICKNESS:Number =		10;		public static const DEFAULT_BORDER_COLOR:uint =				0x000000;		public static const DEFAULT_FILL_ALPHA:Number =				1.0;		public static const DEFAULT_FILL_COLOR:uint =				0xCCCCCC;		public static const DEFAULT_NODE_CONTENT:String =			"nodeContent";		public static const DEFAULT_NODE_HREF:String =				"#";		public static const DEFAULT_CONTENT_IS_IMAGE:Boolean =		false;		public static const DEFAULT_NODE_CONTENT_SIZE:Number =		10;		public static const DEFAULT_NODE_CONTENT_FONT:String =		"Arial";		public static const DEFAULT_NODE_CONTENT_COLOR:uint =		0x000000;		public static const DEFAULT_NODE_CONTENT_ALIGN:String =		"center";		public static const DEFAULT_NODE_CONTENT_ALPHA:Number =		1.0;				/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		CONFIGURABLE ATTRIBUTES		::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/		public var nodeDiameter:Number;		public var borderThickness:Number;		public var borderAlpha:Number;		public var borderColor:uint;		public var fillAlpha:Number;		public var fillColor:uint;		public var nodeContent:String;		public var nodeHref:String;		public var contentIsImage:Boolean;		public var nodeContentSize:Number;		public var nodeContentFont:String;		public var nodeContentColor:uint;		public var nodeContentAlign:String;		public var nodeContentAlpha:Number;				/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		PRIVATE VARIABLES		::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/		private var node:Sprite;		private var txt:TextField;		private var format:TextFormat;		private var ldr:Loader;		private var url:URLRequest;				/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		INITIALIZATION		::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/		private function init():void {			if(!borderThickness) {				borderThickness = DEFAULT_BORDER_THICKNESS;			}			if(!borderAlpha) {				borderAlpha = DEFAULT_BORDER_ALPHA;			}			if(!borderColor) {				borderColor = DEFAULT_BORDER_COLOR;			}			if(!fillAlpha) {				fillAlpha = DEFAULT_FILL_ALPHA;			}			if(!fillColor) {				fillColor = DEFAULT_FILL_COLOR;			}			if(!nodeContent) {				nodeContent = DEFAULT_NODE_CONTENT;			}			if(!nodeHref) {				nodeHref = DEFAULT_NODE_HREF;			}			if(!contentIsImage) {				contentIsImage = DEFAULT_CONTENT_IS_IMAGE;			}			if(!nodeContentSize) {				nodeContentSize = DEFAULT_NODE_CONTENT_SIZE;			}			if(!nodeContentFont) {				nodeContentFont = DEFAULT_NODE_CONTENT_FONT;			}			if(!nodeContentColor) {				nodeContentColor = DEFAULT_NODE_CONTENT_COLOR;			}			if(!nodeContentAlign) {				nodeContentAlign = DEFAULT_NODE_CONTENT_ALIGN;			}			if(!nodeContentAlpha) {				nodeContentAlpha = DEFAULT_NODE_CONTENT_ALPHA;			}		}				/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		CONSTRUCTOR		::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/		public function Node(_nodeDiameter:Number) {			nodeDiameter = _nodeDiameter;						init();		}				/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		CREATE():void		::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/		public function createNode():void {			node = new Sprite();			node.graphics.lineStyle(borderThickness,borderColor,borderAlpha,false,"never");			node.graphics.beginFill(fillColor,fillAlpha);			node.graphics.drawCircle(0,0,nodeDiameter/2);			node.graphics.endFill();						node.addEventListener(MouseEvent.MOUSE_DOWN,mouseDown_handler);			//trace(contentIsImage);						if(!contentIsImage)			{				txt = new TextField();				txt.condenseWhite = true;				txt.antiAliasType=AntiAliasType.ADVANCED;				txt.autoSize = TextFieldAutoSize.CENTER;				txt.gridFitType = GridFitType.SUBPIXEL;				txt.selectable = false;				txt.mouseEnabled = false;				txt.border = false;				txt.multiline = true;				txt.htmlText = nodeContent;				txt.x = node.x - txt.width/2;				txt.y = node.y - txt.height/2;								format = new TextFormat();				/*var myFont:Font = new Font1();*/				format.size = nodeContentSize;				format.font = nodeContentFont; // myFont.fontName				format.color = nodeContentColor;				format.align = nodeContentAlign;				txt.setTextFormat(format);								txt.alpha = nodeContentAlpha;				node.addChild(txt);								addChild(node);							} else {				ldr = new Loader();				ldr.contentLoaderInfo.addEventListener(Event.COMPLETE,onImageLoaded);				var url:String = nodeContent;				var urlReq:URLRequest = new URLRequest(url);				ldr.load(urlReq);			}					}				function onImageLoaded(e:Event):void {			ldr.width = nodeDiameter;			ldr.height = nodeDiameter;						// Draw a circle and add it to the display list.			var imageMask:Sprite = createMask();						ldr.mask = imageMask;						ldr.x -= (imageMask.width/2);			ldr.y -= (imageMask.height/2);						node.addChild(ldr);			node.addChild(imageMask);			addChild(node);		}				function createMask():Sprite {			var maskSprite = new Sprite();			maskSprite.graphics.beginFill(0x000000,1);			maskSprite.graphics.drawCircle(0,0,nodeDiameter/2);			maskSprite.graphics.endFill();						return maskSprite;		}				function mouseDown_handler(e:MouseEvent):void {			url = new URLRequest(nodeHref);			try {				navigateToURL(url, '_self'); // second argument is target			} catch (e:Error) {				trace("Error occurred!");			}		}			}	}