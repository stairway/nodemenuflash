package com.nodemenu {		import flash.events.MouseEvent;		import com.nodemenu.BouncyNode;	import com.nodemenu.ConfigureNode;		public class NodeButton extends BouncyNode {				public var buttonActive:Boolean;				private var _configureNode:ConfigureNode;				/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		INITIALIZATION		::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/		private function init():void {			buttonMode = true;			buttonActive = false;		}				/*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		CONSTRUCTOR		::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/		public function NodeButton(configureNode:ConfigureNode) {			_configureNode = configureNode;			configureSize();			super(initialDiameter,finalDiameter);			init();			configureListeners();			configureStyle();			configureContent();			createNode();		}				public function configureSize():void {			initialDiameter = _configureNode.initialDiameter;			finalDiameter = _configureNode.finalDiameter;		}				public function configureStyle():void {			borderThickness = _configureNode.borderThickness;			borderAlpha = _configureNode.borderAlpha;			borderColor = _configureNode.borderColor;			fillAlpha = _configureNode.fillAlpha;			fillColor = _configureNode.fillColor;			initialAlpha = _configureNode.initialAlpha;			finalAlpha = _configureNode.finalAlpha;			alpha = initialAlpha;		}				public function configureContent():void {			nodeContent = _configureNode.nodeContent;			nodeHref = _configureNode.nodeHref;			contentIsImage = _configureNode.contentIsImage;			nodeContentSize = _configureNode.nodeContentSize;			nodeContentFont = _configureNode.nodeContentFont;			nodeContentColor = _configureNode.nodeContentColor;			nodeContentAlign = _configureNode.nodeContentAlign;			nodeContentAlpha = _configureNode.nodeContentAlpha;		}				public function addMouseOver():void {			super.addEventListener(MouseEvent.MOUSE_OVER,openNode);		}				public function addMouseOut():void {			super.addEventListener(MouseEvent.MOUSE_OUT,closeNode);		}				public function removeMouseOver():void {			super.removeEventListener(MouseEvent.MOUSE_OVER,openNode);		}				public function removeMouseOut():void {			super.removeEventListener(MouseEvent.MOUSE_OUT,closeNode);		}				private function configureListeners():void {			super.addEventListener(NodeEvent.NODE_OPEN,activateNode);			super.addEventListener(NodeEvent.NODE_CLOSED,disableNode);		}				public function activateNode(e:NodeEvent=null):void {			buttonActive = true;			mouseEnabled = true;		}				public function disableNode(e:NodeEvent=null):void {			buttonActive = false;			mouseEnabled = false;		}			}	}